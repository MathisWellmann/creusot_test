(* #"/home/magewe/MathisWellmann/creusot_test/src/lib.rs" 17 0 17 42 *)

let%span slib = "/home/magewe/MathisWellmann/creusot_test/src/lib.rs" 15 10 15 38
let%span slib'0 = "/home/magewe/MathisWellmann/creusot_test/src/lib.rs" 16 10 16 38
let%span sord = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 129 39 129 89
let%span sord'0 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 134 39 134 86
let%span sord'1 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 139 39 139 86
let%span sord'2 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 144 39 144 89
let%span sord'3 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 149 39 149 70
let%span sord'4 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 154 40 154 57
let%span sord'5 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 155 40 155 57
let%span sord'6 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 156 39 156 56
let%span sord'7 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 161 40 161 70
let%span sord'8 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 162 39 162 72
let%span sord'9 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 167 40 167 73
let%span sord'10 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 168 39 168 69
let%span sord'11 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 173 39 173 84
let%span sord'12 = "/home/magewe/MathisWellmann/creusot/creusot-contracts/src/logic/ord.rs" 230 16 236 17

use creusot.int.Int32
use creusot.prelude.Any

type t_Ordering  =
  | C_Less
  | C_Equal
  | C_Greater

function cmp_log (self : Int32.t) (o : Int32.t) : t_Ordering =
  [%#sord'12] if Int32.lt self o then C_Less else if self = o then C_Equal else C_Greater

function eq_cmp (x : Int32.t) (y : Int32.t) : ()

axiom eq_cmp_spec : forall x : Int32.t, y : Int32.t . [%#sord'11] (x = y) = (cmp_log x y = C_Equal)

function antisym2 (x : Int32.t) (y : Int32.t) : ()

axiom antisym2_spec : forall x : Int32.t, y : Int32.t . ([%#sord'9] cmp_log x y = C_Greater)
 -> ([%#sord'10] cmp_log y x = C_Less)

function antisym1 (x : Int32.t) (y : Int32.t) : ()

axiom antisym1_spec : forall x : Int32.t, y : Int32.t . ([%#sord'7] cmp_log x y = C_Less)
 -> ([%#sord'8] cmp_log y x = C_Greater)

function trans (x : Int32.t) (y : Int32.t) (z : Int32.t) (o : t_Ordering) : ()

axiom trans_spec : forall x : Int32.t, y : Int32.t, z : Int32.t, o : t_Ordering . ([%#sord'4] cmp_log x y = o)
 -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)

function refl (x : Int32.t) : ()

axiom refl_spec : forall x : Int32.t . [%#sord'3] cmp_log x x = C_Equal

function cmp_gt_log (x : Int32.t) (y : Int32.t) : ()

axiom cmp_gt_log_spec : forall x : Int32.t, y : Int32.t . [%#sord'2] Int32.gt x y = (cmp_log x y = C_Greater)

function cmp_ge_log (x : Int32.t) (y : Int32.t) : ()

axiom cmp_ge_log_spec : forall x : Int32.t, y : Int32.t . [%#sord'1] Int32.ge x y = (cmp_log x y <> C_Less)

function cmp_lt_log (x : Int32.t) (y : Int32.t) : ()

axiom cmp_lt_log_spec : forall x : Int32.t, y : Int32.t . [%#sord'0] Int32.lt x y = (cmp_log x y = C_Less)

function cmp_le_log (x : Int32.t) (y : Int32.t) : ()

axiom cmp_le_log_spec : forall x : Int32.t, y : Int32.t . [%#sord] Int32.le x y = (cmp_log x y <> C_Greater)

meta "compute_max_steps" 1000000

let rec max[#"/home/magewe/MathisWellmann/creusot_test/src/lib.rs" 17 0 17 42] (v0:Int32.t) (v1:Int32.t) (return'  (x:Int32.t))= (! bb0
  [ bb0 = s0
    [ s0 =  [ &_5 <- Int32.gt v0'0 v1'0 ] s1 | s1 = any [ br0 -> {_5 = false} (! bb2) | br1 -> {_5} (! bb1) ]  ]
  
  | bb1 = s0 [ s0 =  [ &_0 <- v0'0 ] s1 | s1 = bb3 ] 
  | bb2 = s0 [ s0 =  [ &_0 <- v1'0 ] s1 | s1 = bb3 ] 
  | bb3 = return''0 {_0} ]
  ) [ & _0 : Int32.t = Any.any_l () | & v0'0 : Int32.t = v0 | & v1'0 : Int32.t = v1 | & _5 : bool = Any.any_l () ] 
  [ return''0 (result:Int32.t)-> {[@expl:max ensures #0] [%#slib] result = v0 \/ result = v1}
    {[@expl:max ensures #1] [%#slib'0] Int32.ge result v0 /\ Int32.ge result v1}
    (! return' {result}) ]
  
